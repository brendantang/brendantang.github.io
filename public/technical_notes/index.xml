<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on brendan tang</title><link>https://brendantang.net/technical_notes/</link><description>Recent content in Posts on brendan tang</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 18 Feb 2021 20:19:30 -0500</lastBuildDate><atom:link href="https://brendantang.net/technical_notes/index.xml" rel="self" type="application/rss+xml"/><item><title>AoC 2020 Day 4 Pt1</title><link>https://brendantang.net/technical_notes/aoc_2020_day_4_pt1/</link><pubDate>Thu, 18 Feb 2021 20:19:30 -0500</pubDate><guid>https://brendantang.net/technical_notes/aoc_2020_day_4_pt1/</guid><description>I&amp;rsquo;ve already mentioned I&amp;rsquo;ve been solving some of the 2020 Advent of Code puzzles as a way to pick up Haskell. I meant to jot down some notes on my thought process while working on this problem and ended up writing like a whole walkthrough/comparison of the solution in both Ruby and Haskell lol
Here&amp;rsquo;s the repository with my answers.
So the problem is basically that we have a big text file full of records consisting of key:value pairs.</description></item><item><title>Advent of Code 2020 in Haskell</title><link>https://brendantang.net/technical_notes/advent_of_code_2020_in_haskell/</link><pubDate>Sun, 31 Jan 2021 16:31:47 -0500</pubDate><guid>https://brendantang.net/technical_notes/advent_of_code_2020_in_haskell/</guid><description>I&amp;rsquo;ve been playing around with Haskell for a bit now and have decided use it to solve some of the puzzles in last year&amp;rsquo;s Advent of Code.
Usually I find it hard to motivate myself to try &amp;ldquo;coding exercises&amp;rdquo; like this. In general I have more momentum when I&amp;rsquo;m just trying to build something I want to use and learning things along the way. But Haskell is really different from anything I&amp;rsquo;m used to, so I have a lot of fundamentals to learn before I can build anything useful.</description></item><item><title>ActiveRecord has_many Association Within the Same Model</title><link>https://brendantang.net/technical_notes/activerecord_has_many_association_within_the_same_model/</link><pubDate>Mon, 14 Dec 2020 11:19:28 -0500</pubDate><guid>https://brendantang.net/technical_notes/activerecord_has_many_association_within_the_same_model/</guid><description>In a Rails project I have a data model for recipes. Some recipes belong to other recipes as byproducts—for example, the recipe for &amp;lsquo;Whey&amp;rsquo; is a byproduct of the recipe for &amp;lsquo;Cheese.&amp;rsquo;
This calls for some recipe instances to have a has_many association with their byproduct recipes, which in turn have a belongs_to association back to their parent recipe.
To achieve this in Rails, the first step is to create a migration adding a column to the recipes table representing that belongs_to relation:</description></item><item><title>CouchDB Is a Comfortable Way to Store Unstructured Data</title><link>https://brendantang.net/technical_notes/couchdb_is_a_comfortable_way_to_store_unstructured_data/</link><pubDate>Fri, 11 Dec 2020 12:35:33 -0500</pubDate><guid>https://brendantang.net/technical_notes/couchdb_is_a_comfortable_way_to_store_unstructured_data/</guid><description>I have a few projects that require persisting a small amount of loosely structured data.
For example, a client needs to collect email addresses from people who want to be notified when her next sale is coming up. She doesn&amp;rsquo;t want to start a newsletter campaign or build out a big customer database—she just needs to save a small list of email addresses!
There are tons of ways to save a small amount of data in a pinch—I could even just throw together a Google Form.</description></item><item><title>Stop Rails Server After Closing the Terminal</title><link>https://brendantang.net/technical_notes/stop_rails_server_after_closing_the_terminal/</link><pubDate>Sun, 06 Dec 2020 13:49:20 -0500</pubDate><guid>https://brendantang.net/technical_notes/stop_rails_server_after_closing_the_terminal/</guid><description>I always accidentally close the terminal window where my local rails server process is running, and every time I have to look up the command to find the process id and kill it so I can restart the server. So I&amp;rsquo;m just writing it down here:
lsof -i tcp:3000 kill &amp;lt;PID&amp;gt; (Stack overflow answer that I&amp;rsquo;ve read 1,000,000 times)</description></item><item><title>Deploying a Ghost Site on Dokku</title><link>https://brendantang.net/technical_notes/deploying_a_ghost_site_on_dokku/</link><pubDate>Sat, 24 Oct 2020 13:44:46 -0400</pubDate><guid>https://brendantang.net/technical_notes/deploying_a_ghost_site_on_dokku/</guid><description>I&amp;rsquo;m hosting a few Ghost sites (alongside other apps) on my server. Ghost is not a particularly painful app to deploy. I&amp;rsquo;ve installed it using the official instructions for Ubuntu, and the Digital Ocean 1-click deploy thing is even easier.
But since I&amp;rsquo;m already using Dokku to manage a bunch of other app deploys on the same server, I figured I would use it to manage the Ghost deploys too.</description></item><item><title>Resolving SQLException: ambiguous column name in a Rails project</title><link>https://brendantang.net/technical_notes/resolving_sql_exception_ambiguous_column_name_in_rails/</link><pubDate>Mon, 12 Oct 2020 14:45:19 -0400</pubDate><guid>https://brendantang.net/technical_notes/resolving_sql_exception_ambiguous_column_name_in_rails/</guid><description>In my current project, I have a model concern which contains shared scopes for filtering and sorting records. For instance, I have the models recipes, batches, and pack_dates. Both recipe and pack_date are associated with a recipe through a belongs_to association.
By including my FilteringScopes module, both batch and pack_date get access to a with_recipe scope which returns only those records which belong to the given recipe (among other filtering and sorting scopes).</description></item><item><title>Find and Replace text in all files that contain it using VIM and grep</title><link>https://brendantang.net/technical_notes/find_and_replace_text_in_all_files_vim_grep/</link><pubDate>Wed, 07 Oct 2020 11:59:16 -0400</pubDate><guid>https://brendantang.net/technical_notes/find_and_replace_text_in_all_files_vim_grep/</guid><description>I&amp;rsquo;m no wizard with VIM or grep, so it helps me to use this post as a cheatsheet.
If I need to, for example, rename a method everywhere that it occurs in a project, I use these commands:
Recursively list all files in a given directory with matching text, then open them all in vim buffers:1
vim `grep -rwl '/path/to/look/in' -e 'string_to_match'` If you want to avoid binary files, also add the -I option.</description></item></channel></rss>