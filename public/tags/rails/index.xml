<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>rails on brendan tang</title><link>https://brendantang.net/tags/rails/</link><description>Recent content in rails on brendan tang</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 24 Apr 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://brendantang.net/tags/rails/index.xml" rel="self" type="application/rss+xml"/><item><title>Enable CORS in Rails</title><link>https://brendantang.net/notebook/cors-in-rails/</link><pubDate>Sat, 24 Apr 2021 00:00:00 +0000</pubDate><guid>https://brendantang.net/notebook/cors-in-rails/</guid><description>You have to explicitly allow Cross Origin Resource Sharing to access your Rails API from another domain, like if you have a separate javascript frontend and a Rails backend.
This was the best link I found: https://medium.com/ruby-daily/understanding-cors-when-using-ruby-on-rails-as-an-api-f086dc6ffc41
No 'Access-Control-Allow-Origin' header is present on the requested resource. is the error message you get when you try to make CORS requests without enabling it.
Enable CORS add gem 'rack-cors' to Gemfile bundle install # config/initializers/cors.</description></item><item><title>ActiveRecord has_many Association Within the Same Model</title><link>https://brendantang.net/2020/12/activerecord-has_many-association-within-the-same-model/</link><pubDate>Mon, 14 Dec 2020 11:19:28 -0500</pubDate><guid>https://brendantang.net/2020/12/activerecord-has_many-association-within-the-same-model/</guid><description>In a Rails project I have a data model for recipes. Some recipes belong to other recipes as byproductsâ€”for example, the recipe for &amp;lsquo;Whey&amp;rsquo; is a byproduct of the recipe for &amp;lsquo;Cheese.&amp;rsquo;
This calls for some recipe instances to have a has_many association with their byproduct recipes, which in turn have a belongs_to association back to their parent recipe.
To achieve this in Rails, the first step is to create a migration adding a column to the recipes table representing that belongs_to relation:</description></item><item><title>Stop Rails Server After Closing the Terminal</title><link>https://brendantang.net/2020/12/stop-rails-server-after-closing-the-terminal/</link><pubDate>Sun, 06 Dec 2020 13:49:20 -0500</pubDate><guid>https://brendantang.net/2020/12/stop-rails-server-after-closing-the-terminal/</guid><description>I always accidentally close the terminal window where my local rails server process is running, and every time I have to look up the command to find the process id and kill it so I can restart the server. So I&amp;rsquo;m just writing it down here:
lsof -i tcp:3000 kill &amp;lt;PID&amp;gt; (Stack overflow answer that I&amp;rsquo;ve read 1,000,000 times)</description></item><item><title>Resolving SQLException: ambiguous column name in a Rails project</title><link>https://brendantang.net/2020/10/resolving-sqlexception-ambiguous-column-name-in-a-rails-project/</link><pubDate>Mon, 12 Oct 2020 14:45:19 -0400</pubDate><guid>https://brendantang.net/2020/10/resolving-sqlexception-ambiguous-column-name-in-a-rails-project/</guid><description>In my current project, I have a model concern which contains shared scopes for filtering and sorting records. For instance, I have the models recipes, batches, and pack_dates. Both recipe and pack_date are associated with a recipe through a belongs_to association.
By including my FilteringScopes module, both batch and pack_date get access to a with_recipe scope which returns only those records which belong to the given recipe (among other filtering and sorting scopes).</description></item></channel></rss>