<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>technical notes on brendan tang</title><link>https://brendantang.net/tags/technical-notes/</link><description>Recent content in technical notes on brendan tang</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 14 Dec 2020 11:19:28 -0500</lastBuildDate><atom:link href="https://brendantang.net/tags/technical-notes/index.xml" rel="self" type="application/rss+xml"/><item><title>ActiveRecord has_many Association Within the Same Model</title><link>https://brendantang.net/2020/12/activerecord-has_many-association-within-the-same-model/</link><pubDate>Mon, 14 Dec 2020 11:19:28 -0500</pubDate><guid>https://brendantang.net/2020/12/activerecord-has_many-association-within-the-same-model/</guid><description>In a Rails project I have a data model for recipes. Some recipes belong to other recipes as byproducts—for example, the recipe for &amp;lsquo;Whey&amp;rsquo; is a byproduct of the recipe for &amp;lsquo;Cheese.&amp;rsquo;
This calls for some recipe instances to have a has_many association with their byproduct recipes, which in turn have a belongs_to association back to their parent recipe.
To achieve this in Rails, the first step is to create a migration adding a column to the recipes table representing that belongs_to relation:</description></item><item><title>CouchDB Is a Comfortable Way to Store Unstructured Data</title><link>https://brendantang.net/2020/12/couchdb-is-a-comfortable-way-to-store-unstructured-data/</link><pubDate>Fri, 11 Dec 2020 12:35:33 -0500</pubDate><guid>https://brendantang.net/2020/12/couchdb-is-a-comfortable-way-to-store-unstructured-data/</guid><description>I have a few projects that require persisting a small amount of loosely structured data.
For example, a client needs to collect email addresses from people who want to be notified when her next sale is coming up. She doesn&amp;rsquo;t want to start a newsletter campaign or build out a big customer database—she just needs to save a small list of email addresses!
There are tons of ways to save a small amount of data in a pinch—I could even just throw together a Google Form.</description></item><item><title>Stop Rails Server After Closing the Terminal</title><link>https://brendantang.net/2020/12/stop-rails-server-after-closing-the-terminal/</link><pubDate>Sun, 06 Dec 2020 13:49:20 -0500</pubDate><guid>https://brendantang.net/2020/12/stop-rails-server-after-closing-the-terminal/</guid><description>I always accidentally close the terminal window where my local rails server process is running, and every time I have to look up the command to find the process id and kill it so I can restart the server. So I&amp;rsquo;m just writing it down here:
lsof -i tcp:3000 kill &amp;lt;PID&amp;gt; (Stack overflow answer that I&amp;rsquo;ve read 1,000,000 times)</description></item><item><title>Deploying a Ghost Site on Dokku</title><link>https://brendantang.net/2020/10/deploying-a-ghost-site-on-dokku/</link><pubDate>Sat, 24 Oct 2020 13:44:46 -0400</pubDate><guid>https://brendantang.net/2020/10/deploying-a-ghost-site-on-dokku/</guid><description>I&amp;rsquo;m hosting a few Ghost sites (alongside other apps) on my server. Ghost is not a particularly painful app to deploy. I&amp;rsquo;ve installed it using the official instructions for Ubuntu, and the Digital Ocean 1-click deploy thing is even easier.
But since I&amp;rsquo;m already using Dokku to manage a bunch of other app deploys on the same server, I figured I would use it to manage the Ghost deploys too.</description></item><item><title>Resolving SQLException: ambiguous column name in a Rails project</title><link>https://brendantang.net/2020/10/resolving-sqlexception-ambiguous-column-name-in-a-rails-project/</link><pubDate>Mon, 12 Oct 2020 14:45:19 -0400</pubDate><guid>https://brendantang.net/2020/10/resolving-sqlexception-ambiguous-column-name-in-a-rails-project/</guid><description>In my current project, I have a model concern which contains shared scopes for filtering and sorting records. For instance, I have the models recipes, batches, and pack_dates. Both recipe and pack_date are associated with a recipe through a belongs_to association.
By including my FilteringScopes module, both batch and pack_date get access to a with_recipe scope which returns only those records which belong to the given recipe (among other filtering and sorting scopes).</description></item><item><title>Find and Replace text in all files that contain it using VIM and grep</title><link>https://brendantang.net/2020/10/find-and-replace-text-in-all-files-that-contain-it-using-vim-and-grep/</link><pubDate>Wed, 07 Oct 2020 11:59:16 -0400</pubDate><guid>https://brendantang.net/2020/10/find-and-replace-text-in-all-files-that-contain-it-using-vim-and-grep/</guid><description>I&amp;rsquo;m no wizard with VIM or grep, so it helps me to use this post as a cheatsheet.
If I need to, for example, rename a method everywhere that it occurs in a project, I use these commands:
Recursively list all files in a given directory with matching text, then open them all in vim buffers:1
vim `grep -rwl '/path/to/look/in' -e 'string_to_match'` If you want to avoid binary files, also add the -I option.</description></item></channel></rss>